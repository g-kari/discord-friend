name: Python Tests

on:
  push:
    branches: [ "main" ]
    paths:
      - '**.py'
      - 'src/bot/requirements.txt'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**.py'
      - 'src/bot/requirements.txt'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        # Install core dependencies to avoid conflicts
        pip install discord.py[voice]==2.3.2 numpy>=2.2.3 soundfile==0.12.1 python-dotenv==1.0.0 sqlalchemy==2.0.23 pydantic httpx aiofiles
        # Don't try to install sounddevice since it requires portaudio
        # Don't try to install aiavatar since it has conflicting dependencies
    - name: Create .env file
      run: |
        cp src/bot/aiavatar_env.example src/bot/.env
    - name: Test AI Service
      run: |
        python -m pytest src/bot/tests/test_ai_service.py -v
    - name: Test env_manager with minimal test file
      run: |
        # Create a simple test file for env_manager to avoid complex imports
        cat > /tmp/test_env_manager.py << 'EOF'
        import unittest
        import tempfile
        import os
        import sys
        
        # Add the src directory to the Python path
        sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
        
        from src.bot.utils import env_manager
        
        class TestEnvManager(unittest.TestCase):
            def setUp(self):
                # Create a temporary .env file for testing
                self.temp_dir = tempfile.TemporaryDirectory()
                self.env_file = os.path.join(self.temp_dir.name, '.env')
                with open(self.env_file, 'w') as f:
                    f.write('TEST_KEY=test_value\n')
                    f.write('ANOTHER_KEY=another_value\n')
            
            def tearDown(self):
                # Remove the temporary directory and its contents
                self.temp_dir.cleanup()
            
            def test_find_env_file(self):
                # Setup a search path to our test .env file
                search_paths = [self.env_file]
                result = env_manager.find_env_file(search_paths)
                self.assertEqual(result, self.env_file)
            
            def test_find_env_file_not_found(self):
                # Test with a non-existent path
                result = env_manager.find_env_file(['/non/existent/path/.env'])
                self.assertIsNone(result)
            
            def test_read_env_file(self):
                lines = env_manager.read_env_file(self.env_file)
                self.assertEqual(len(lines), 2)
                self.assertEqual(lines[0], 'TEST_KEY=test_value\n')
                self.assertEqual(lines[1], 'ANOTHER_KEY=another_value\n')
            
            def test_update_env_variable(self):
                # Update an existing variable
                result = env_manager.update_env_variable('TEST_KEY', 'new_value', self.env_file)
                self.assertTrue(result)
                
                # Check if the file was updated
                with open(self.env_file, 'r') as f:
                    content = f.read()
                
                self.assertIn('TEST_KEY=new_value', content)
                self.assertIn('ANOTHER_KEY=another_value', content)
            
            def test_update_env_variable_not_found(self):
                # Try to update a non-existent variable
                result = env_manager.update_env_variable('NEW_KEY', 'new_value', self.env_file)
                self.assertTrue(result)
                
                # Check if the file was updated with the new variable
                with open(self.env_file, 'r') as f:
                    content = f.read()
                
                self.assertIn('NEW_KEY=new_value', content)
            
            def test_json_encode(self):
                # Test JSON encoding for dictionary values
                test_dict = {'key1': 'value1', 'key2': ['item1', 'item2']}
                result = env_manager.update_env_variable('JSON_KEY', test_dict, self.env_file, json_encode=True)
                self.assertTrue(result)
                
                # Check if the file was updated with JSON encoded value
                with open(self.env_file, 'r') as f:
                    content = f.read()
                
                self.assertIn('JSON_KEY={"key1": "value1", "key2": ["item1", "item2"]}', content)
        
        if __name__ == '__main__':
            unittest.main()
        EOF
        
        # Run the test
        python -m pytest /tmp/test_env_manager.py -v